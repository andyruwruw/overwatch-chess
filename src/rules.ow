settings
{
	main
	{
		Description: "Play Chess in Overwatch!"
	}

	lobby
	{
		Max Spectators: 12
		Max Team 1 Players: 1
		Max Team 2 Players: 1
		Swap Teams After Match: No
	}

	modes
	{
		Team Deathmatch
		{
			Game Length In Minutes: 15
			Mercy Resurrect Counteracts Kills: Off
			Score To Win: 200

			enabled maps
			{
				Workshop Island
			}
		}

		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 45%
		}
	}

	heroes
	{
		General
		{
			Doomfist
			{
				Damage Dealt: 10%
				Damage Received: 10%
				Rising Uppercut Knockback Scalar: 50%
				Rocket Punch Knockback Scalar: 50%
				Ultimate Duration: 25%
				Ultimate Generation - Combat Meteor Strike: 0%
				Ultimate Generation - Passive Meteor Strike: 0%
				Ultimate Generation Meteor Strike: 10%
			}

			enabled heroes
			{
				Doomfist
			}
		}
	}

	extensions
	{
		Beam Effects
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
		Spawn More Dummy Bots
	}
}

variables
{
  global:
		0: Stack1
		1: Board
		2: c
		3: d
		4: e
		5: f
		6: g
		7: h
		8: i
		9: j
		10: k
		11: l
		12: m
		13: n
    14: o
		15: p
		16: q
		17: r
		18: s
		19: t
		20: u
		21: v
    22: w
    23: x
		24: y
    25: z
  player:
    0: CameraMode
		1: LockView
		2: DisableKnockback
		3: ShowMoves
		4: ShowCinematics
		5: f
		6: g
		7: h
		8: i
		9: j
		10: k
		11: l
		12: m
		13: n
    14: o
		15: p
		16: q
		17: r
		18: s
		19: t
		20: u
		21: v
    22: w
    23: x
		24: y
    25: z
}

subroutines
{
	0: StartTopDownCamera
	1: CreateGame
	2: CreatePiece
	3: d
	4: e
	5: f
	6: g
	7: h
}

// Inicialization of Variables
rule("Initialize")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		(Global.Stack1 == Null) == True;
	}

	actions
	{
		Global.Stack1 = Empty Array;
		// Frame Pointer
		Global.Stack1[0] = 2;
		// Stack Pointer
		Global.Stack1[1] = 2;

		// const TOP_LEFT_VECTOR = new Vector(15.55, 0, 15.55);
		Global.Stack1[Global.Stack1[1]] = Custom String("TOP_LEFT_VECTOR");
		Global.Stack1[Global.Stack1[1] + 1] = Vector(15.55, 0, 15.55);
		Global.Stack1[1] += 2;

		// const TILE_SIZE = -3.7;
		Global.Stack1[Global.Stack1[1]] = Custom String("TILE_SIZE");
		Global.Stack1[Global.Stack1[1] + 1] = -3.7;
		Global.Stack1[1] += 2;

		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;

		// Return Address
		Global.Stack1[Global.Stack1[1]] = Global.Stack1[0];
		Global.Stack1[1] += 1;
		
		// CreateGame();
		Call Subroutine(CreateGame);
	}
}

//
// General Player Rules
//

// Applies player specific rules.
rule("Player: Joined")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Call Subroutine(StartTopDownCamera);
	}
}

// Disables players from inflicting damage.
rule("Player: Disable Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		!Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 0);
	}
}

// Disables players from moving bots
rule("Player: Disable Knockback")
{
	event
	{
		Player Dealt Knockback;
		All;
		All;
	}

	conditions
	{
		!Is Dummy Bot(Event Player) == True;
		Is Dummy Bot(Victim) == True;
	}

	actions
	{
		Set Knockback Dealt(Victim, 0);
	}
}

// Prevents player from jumping off of the island
rule("Player: Out of Bounds")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!Is Dummy Bot(Event Player) == True;
		Y Component Of(Position Of(Event Player)) <= -5;
	}

	actions
	{
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(0, 35, 0)), To World);
		Apply Impulse(Event Player, Direction Towards(Event Player, Vector(0, 20, 0)), 40, To World, Cancel Contrary Motion);
		Set Status(Event Player, Null, Stunned, 2.200);
	}
}

//
// Scenes
//

// CreateGame()
// Creates and set up the board for a new game.
rule("Create Game")
{
	event
	{
		Subroutine;
		CreateGame;
	}

	actions
	{
		// Sets Local Scope (FramePointer) with 0 Parameters
		Global.Stack1[0] = Global.Stack1[1];

		Global.Board = Empty Array;

		// 1 White Pawn, 2 White Knight, 3 White Bishop, 4 White Rook, 5 White Queen, 6 White King,
		// 7 Black Pawn, 8 Black Knight, 9 Black Bishop, 10 Black Rook, 11 Black Queen, 12 Black King
		Modify Global Variable(Board, Append To Array, 10);
		Modify Global Variable(Board, Append To Array, 8);
		Modify Global Variable(Board, Append To Array, 9);
		Modify Global Variable(Board, Append To Array, 11);
		Modify Global Variable(Board, Append To Array, 12);
		Modify Global Variable(Board, Append To Array, 9);
		Modify Global Variable(Board, Append To Array, 8);
		Modify Global Variable(Board, Append To Array, 10);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 7);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 0);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 1);
		Modify Global Variable(Board, Append To Array, 4);
		Modify Global Variable(Board, Append To Array, 2);
		Modify Global Variable(Board, Append To Array, 3);
		Modify Global Variable(Board, Append To Array, 5);
		Modify Global Variable(Board, Append To Array, 6);
		Modify Global Variable(Board, Append To Array, 3);
		Modify Global Variable(Board, Append To Array, 2);
		Modify Global Variable(Board, Append To Array, 4);

		Set Global Variable(c, Array Slice(Global.Board, 0,2));

		// let i = 0;
		Global.Stack1[Global.Stack1[1]] = Custom String("i");
		Global.Stack1[Global.Stack1[1] + 1] = 0;
		Global.Stack1[1] += 2;

		While(Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("i")) + 1 + Global.Stack1[0]] < Count Of(Global.Board));
			// Return Address
			Global.Stack1[Global.Stack1[1]] = Global.Stack1[0];
			Global.Stack1[1] += 1;

			// parameter: column = i;
			Global.Stack1[Global.Stack1[1]] = Custom String("column");
			Global.Stack1[Global.Stack1[1] + 1] = Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("i")) + 1 + Global.Stack1[0]];
			Global.Stack1[1] += 2;
			
			// if (column > 7)
			If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("column")) + 1 + Global.Stack1[0]] > 7);
				// column %= 8;
				Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("column")) + 1 + Global.Stack1[0]] %= 8;
			End;

			// parameter: row = Math.Floor(i / 8);
			Global.Stack1[Global.Stack1[1]] = Custom String("row");
			Global.Stack1[Global.Stack1[1] + 1] = Round To Integer(Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("i")) + 1 + Global.Stack1[0]] / 8, Down);
			Global.Stack1[1] += 2;
			
			// parameter: hero = Board[i];
			Global.Stack1[Global.Stack1[1]] = Custom String("heroTeam");
			Global.Stack1[Global.Stack1[1] + 1] = Global.Board[Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("i")) + 1 + Global.Stack1[0]]];
			Global.Stack1[1] += 2;

			// CreatePiece(column, row, heroTeam);
			Call Subroutine(CreatePiece);

			// i += 1;
			Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("i")) + 1 + Global.Stack1[0]] += 1;
		End;

		// Rollback stack pointer
		Global.Stack1[1] = Global.Stack1[0] - 1;
		// Set scope to previous (FramePointer)
		Global.Stack1[0] = Global.Stack1[Global.Stack1[1]];
	}
}

// CreatePiece(column: int, row: int, heroTeam: int)
// Creates a dummy bot for a piece at a location.
rule("Create Piece")
{
	event
	{
		Subroutine;
		CreatePiece;
	}

	actions
	{
		// Sets Local Scope (FramePointer) with 3 Parameters
		Global.Stack1[0] = Global.Stack1[1] - (3 * 2);

		// if (heroTeam > 0)
		If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] > 0);
			// Determine Hero
			// 1 White Pawn, 2 White Knight, 3 White Bishop, 4 White Rook, 5 White Queen, 6 White King,
			// 7 Black Pawn, 8 Black Knight, 9 Black Bishop, 10 Black Rook, 11 Black Queen, 12 Black King

			// let hero = ?;
			Global.Stack1[Global.Stack1[1]] = Custom String("hero");
			// if (hero == 1 || hero == 7)
			If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 1
				|| Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 7);
				// let hero = Hero.McCree;
				Global.Stack1[Global.Stack1[1] + 1] = Hero(McCree);
			// else if (hero == 2 || hero == 8)
			Else If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 2
				|| Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 8);
				// let hero = Hero.Winston;
				Global.Stack1[Global.Stack1[1] + 1] = Hero(Winston);
			// else if (hero == 3 || hero == 9)
			Else If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 3
				|| Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 9);
				// let hero = Hero.Widowmaker;
				Global.Stack1[Global.Stack1[1] + 1] = Hero(Widowmaker);
			// else if (hero == 4 || hero == 10)
			Else If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 4
				|| Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 10);
				// let hero = Hero.Reinhardt;
				Global.Stack1[Global.Stack1[1] + 1] = Hero(Reinhardt);
			// else if (hero == 5 || hero == 11)
			Else If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 5
				|| Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 11);
				// let hero = Hero.Roadhog;
				Global.Stack1[Global.Stack1[1] + 1] = Hero(Roadhog);
			// else if (hero == 6 || hero == 12)
			Else If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 6
				|| Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] == 12);
				// let hero = Hero.Orisa;
				Global.Stack1[Global.Stack1[1] + 1] = Hero(Orisa);
			End;
			// let hero = ?;
			Global.Stack1[1] += 2;

			// if (heroTeam <= 6)
			If (Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("heroTeam")) + 1 + Global.Stack1[0]] <= 6);
				// CreateDummyBot(hero, Teams[1], Slots.Random, new Vector(TOP_LEFT_VECTOR.x + TILE_SIZE / 2 + TILE_SIZE * column), 0, TOP_LEFT_VECTOR.y + TILE_SIZE / 2 + TILE_SIZE * row), new Vector(0, 0, 10));
				Create Dummy Bot(
					Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("hero")) + 1 + Global.Stack1[0]],
					Team 1,
					-1,
					Vector(
						X Component Of(Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TOP_LEFT_VECTOR")) + 1]) + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] / 2 + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] * Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("column")) + 1 + Global.Stack1[0]],
						0,
						Z Component Of(Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TOP_LEFT_VECTOR")) + 1]) + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] / 2 + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] * Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("row")) + 1 + Global.Stack1[0]]),
					Vector(0, 0, 10));
			Else;
				// CreateDummyBot(hero, Teams[2], Slots.Random, new Vector(TOP_LEFT_VECTOR.x + TILE_SIZE / 2 + TILE_SIZE * column), 0, TOP_LEFT_VECTOR.y + TILE_SIZE / 2 + TILE_SIZE * row), new Vector(0, 0, 10));
				Create Dummy Bot(
					Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("hero")) + 1 + Global.Stack1[0]],
					Team 2,
					-1,
					Vector(
						X Component Of(Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TOP_LEFT_VECTOR")) + 1]) + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] / 2 + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] * Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("column")) + 1 + Global.Stack1[0]],
						0,
						Z Component Of(Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TOP_LEFT_VECTOR")) + 1]) + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] / 2 + Global.Stack1[Index Of Array Value(Global.Stack1, Custom String("TILE_SIZE")) + 1] * Global.Stack1[Index Of Array Value(Array Slice(Global.Stack1, Global.Stack1[0], Global.Stack1[1] - Global.Stack1[0]), Custom String("row")) + 1 + Global.Stack1[0]]),
					Vector(0, 0, 10));
			End;
		End;

		// Rollback stack pointer
		Global.Stack1[1] = Global.Stack1[0] - 1;
		// Set scope to previous (FramePointer)
		Global.Stack1[0] = Global.Stack1[Global.Stack1[1]];
	}
}

// Starts player's top-down camera
rule("Start Top-Down Camera")
{
	event
	{
		Subroutine;
		StartTopDownCamera;
	}

	actions
	{
		Start Camera(Event Player, Vector(0, 35, 0), Vector(0, 0, 0), 1);
	}
}

// rule("Start Turn")
// {
// 	event
// 	{

// 	}

// 	actions
// 	{
// 		Create HUD Text(Event Player, Custom String("Player {0}'s Turn", Global.PlayerTurn), Null, Null, Top, 0, Color(White), Color(
// 			White), Color(White), Visible To and String, Default Visibility);
// 	}
// }
